{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>Visit the blog.</p> <p></p>"},{"location":"blog/","title":"Blog","text":"<p>Welcome :)</p>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/","title":"Preparing the Data: Opening our Toy Box \ud83c\udf81\ud83d\udc40","text":"<p>Imagine each sound as a beautiful toy in our toy box. We have lots of them, from kicks to cymbals. But how do we show these sounds to our computer..?</p> <p>By turning them into pictures!</p>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#picture-magic-turning-sounds-into-images","title":"Picture Magic: Turning Sounds into Images \ud83c\udfb5\u27a1\ufe0f\ud83d\uddbc\ufe0f","text":"<p>Have you ever thrown a stone into the water and watch the ripples? That's also how sound works. We are going to take those ripples and turn them into pictures called a <code>spectogram</code>.</p>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#preparing-our-toys-getting-them-ready-to-play","title":"Preparing our Toys: Getting Them Ready to Play! \ud83e\uddf8\ud83d\udebf","text":""},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#making-sound-pictures-yes-were-back-to-crafting-at-school","title":"Making Sound Pictures: Yes.. we're back to crafting at school \ud83e\udee3\ud83c\udfa8\ud83d\udd8c\ufe0f","text":"<p>Why do we make pictures of sound?</p> <p>One of the easy and well researched ways of working with AI is using images, this is because images are easy for computers to understand. That's why we will turn our sounds into colorful pictures called <code>spectograms</code> (just like we did when analyzing one of our samples in the last lesson).</p> <p>Installing TQDM</p> <p>Now, because turning our sounds into pictures, takes a pretty long time. It seems very helpful to me to add a progress bar. Just so we know something is happening...</p> <p>In your command prompt / terminal, run:</p> <pre><code>pip install tqdm\n</code></pre> <p>Let's create a new notebook!</p> <p>Whisper the incantation into your terminal or command prompt:</p> <pre><code>jupyter notebook\n</code></pre> <p>Create a fresh Canvas:</p> <p>Upon the scroll in the top-right corner, click on <code>New</code>. From the magical list, select <code>Notebook</code>.</p> <p>Name Your Magical Book \ud83d\udcd6\u2728:</p> <p>Click on <code>File</code>, and choose the enchantment <code>Rename...</code>. Give it a name that fits with our current quest. How about <code>SoundToPainting.ipynb</code>?</p>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#gathering-our-sounds","title":"Gathering our sounds","text":"<p>Like in the previous section, we will first be gather the locations of all our sounds in our dataset, let's use the same code in our first cell:</p> <pre><code># First we need to import the \"os\" spellbook, so we can navigate our file system\nimport os\n# Here, we create a spell to gather all our sound scrolls (audio files).\ndef gather_our_sounds(dataset_directory):\n\"\"\"Recursively gather all audio sample paths within our dataset directory.\"\"\"\n# We will keep all the found scrolls here.\nsample_paths = []\n# We walk through all the places (folders) in our dataset.\nfor dir, names, files in os.walk(dataset_directory):\n# For each scroll (file) we find...\nfor file in files:\n# We check if the scroll sings in 'wav' or 'aif' tune.\nif file.endswith('.wav') or file.endswith('.aif'): # Assuming WAV/AIF format, but you can modify or extend as required\n# If it does, we add it to our collection.\nsample_paths.append(os.path.join(dir, file))\n# We return our collection of magical sounds to the code that is calling this function.\nreturn sample_paths\n</code></pre> <p>Now let's see how this looks like, in the new cell, let's use this function and display the paths:</p> <pre><code>all_sounds = gather_our_sounds('dataset')\nall_sounds\n</code></pre> <p>It will show a list of all your samples in the dataset. Here's a small section of how my dataset looks like:</p> <pre><code>[\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_01.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_02.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_03.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_04.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_05.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_06.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_07.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_08.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_09.wav',\n'dataset\\\\drums\\\\claps\\\\IS_124_Dance_Clap_10.wav',\n]\n</code></pre>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#turning-our-sounds-into-beautiful-pictures","title":"Turning our sounds into beautiful pictures","text":"<p>Let's now use this list of sounds and turn them into spectograms.</p> <p>We loop through all our sounds and create spectograms for them. We store them together with the audio file, so we can keep the same directory structure.</p> <p>We will be running the following process in batches, if we would process our entire dataset at once, well let's just say... our PC wouldn't be too happy. I've even experienced the infamous blue screen of death, because i had too many samples loaded in memory.</p> <p>Since the more samples we have, the more that can go wrong during processing. This is why we also add a check if the spectogram already exists, if it already exists, it will skip processing that file.</p> <p>Imagine processing for 10 minutes, and then jupyter crashes &gt;.&lt;, if we then rerun the cell, we don't have to reprocess all the files we already did...</p> <p>Or adding new files to our dataset and we want to just preprocess our new samples.</p> <p>Create a new cell, and enter the following:</p> <pre><code>import librosa\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm  # Importing tqdm.notebook.tqdm for a cleaner display in Jupyter\nimport gc # Garbage collection\n# Let's keep our magic efficient by processing in smaller batches\nbatch_size = 100\n# Create an outer progress bar for the entire dataset\nouter_pbar = tqdm(range(0, len(all_sounds), batch_size), desc='Overall Progress')\nfor i in outer_pbar:\n# Create an inner progress bar for the current batch\ninner_pbar = tqdm(all_sounds[i:i+batch_size], desc=f'Processing batch {i//batch_size + 1}', leave=False)\n# Load and process the files in batches of 'batch_size'\nfor sound in inner_pbar:\nexists = False\n# Determine the name of the spectogram file\ndest = sound.replace('.wav', '').replace('.aif', '') + '-Spectogram.png'\n# Check if the spectogram file already exists\nif os.path.exists(dest):\n# If it exists, skip this iteration\nexists = True\ncontinue\n# Load our sound into librosa\nmelody, speed = librosa.load(sound, sr=None)\n# Use a spell from librosa to turn our melody into a beautiful spectogram\nspectogram = librosa.amplitude_to_db(np.abs(librosa.stft(melody)), ref=np.max)\n# Prepare our canvas to paint on\nplt.figure(figsize=(10, 4))\n# Paint the magic on our canvas\nlibrosa.display.specshow(spectogram, sr=speed, x_axis='time', y_axis='log')\n# Painting a decibel meter\nplt.colorbar(format='%+2.0f dB')\n# Saving our spectogram\nplt.savefig(dest)\nplt.close() # This makes sure we don't show the image in the notebook, since we just want to save it in our dataset.\nif not exists:\n# Now let's free up our memory!\ndel melody, spectogram, speed\ngc.collect() # Forces garbage collection to collect garbage\n</code></pre> <p>Now when we run this cell, we can see a beautiful progress bar, keeping track of saving our spectograms:</p> <p></p>"},{"location":"blog/2023/08/22/preparing-the-data-opening-our-toy-box/#setting-the-stage-for-our-grand-spell","title":"Setting The Stage For Our Grand Spell \ud83e\ude84\ud83c\udfb5","text":"<p>With our sounds now painted as beautiful images, we are ready to continue our journey. In the next chapter, we are becoming spellcasters! Using our painted sounds, we are going to create a grand spell --a model--, that is going to predict our future sounds.</p> <p>Are you ready..? \ud83c\udfb6\ud83d\udd2e</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/","title":"Finding &amp; Acquiring Data: The Cornerstone of Magical Models \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udd0d","text":"<p>Welcome back! Deep Learning sorcerers of the future! \ud83c\udf0c</p> <p>If deep learning was a spell, then data would be it's most powerful ingredient. \ud83d\udcdc\u2728 While in our previous chapter, we gave ourselves the right tools and spells, this chapter will guide us into the heart of every magic model: data.</p> <p>Imagine trying to cast a spell, without it's magic essence. \ud83d\udeab\ud83d\udd2e That's just the same as trying to cast a deep learning spell without data. In both scenarios, our trials would fail. For any deep learning spell to work, they need data. \ud83d\udca7\ud83e\udde0</p> <p>Join me as we go on a expedition across the great halls filled with scrolls of knowledge.  We will go from the chambers of <code>Kaggle</code> to the shelves of <code>UCI</code>. \ud83c\udff0\ud83d\uddfa\ufe0f Together, we wont only learn to find these scrolls, but also to understand and choose the ones that fit our goal.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#the-essence-of-data-in-deep-learning","title":"The Essence of Data in Deep Learning","text":""},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#understanding-the-foundation","title":"Understanding the Foundation \ud83c\udff0","text":"<p>Deep Learning is a powerful combination between algorithsm and computations. But remove all these spells and you will discover that the heart of this magic is, and always will be, data. \ud83d\udcdc\u2728</p> <p>Imagine a young wizard, eager to learn a new spell. Without a spellbook to guid him, or a mentor to show the way, he would be walking a very difficult path. In the world of deep learning, data acts as that all important spellbook, guiding our models to success.</p> <p>Why is data so important:</p> <ol> <li> <p>Training Ground:</p> <p>Just like a newbie learns by practicing, our models learn by studying data. Each piece of data acts like a puzzle \ud83e\udde9, teaching the model bit by bit, until it can see the larger picture.</p> </li> <li> <p>Validation and Testing:</p> <p>The moment a model is trained, it's like a wizard ready to face the challenge. Testing it with new data makes sure that our spells are effective, not just inside our academy, but in the whole world beyond \ud83c\udf0d</p> </li> <li> <p>Continous Improvement:</p> <p>Magic, just like technology, grows stronger every day. By always giving new data to our models, we make sure they adept and grow, becoming better with each spell cast. \ud83c\udf31\u27a1\ufe0f\ud83c\udf33</p> </li> </ol> <p>The Balance of Quanity vs. Quality: How much is enough?:</p> <p>While it might be tempting to gather so much data it can fill a ocean (trust me, i've been there), hoping it will make our spells invincible, it's very important to strike a good balance.</p> <ul> <li> <p>Quality:</p> <p>A million scrolls won't help, if they are filled with nonsense. Quality data makes sure our models are learning the right lessons. It's better to have a small bit of accurate and relevant data, than heaps of irrelevant ones.</p> </li> <li> <p>Quantity:</p> <p>While quality is very important, quantity cannot be underestimated. A single spellbook might teach the basics, but a big library allows for a deeper understanding and mastery.</p> <p>To summerize, data is to deep learning what essence is to magic. And as you will discover, finding the right blend of data is a great journey in itself! \ud83c\udf1f</p> </li> </ul>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#navigating-the-grand-halls-of-data","title":"Navigating the Grand Halls of Data \ud83c\udf0d\ud83d\udd0d","text":"<p>Walking through the world of deep learning, you will soon realize the huge amount of different types of data available. These grand halls are filled with scrolls and books, all of them representing unique datasets waiting to be used. But how do you decide which path to take and which scroll to use?</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#the-importance-of-choosing-the-right-data","title":"The Importance of Choosing the Right Data \ud83d\udddd\ufe0f\ud83d\udcdc","text":"<p>Every project or spell you want to cast, has it's own requirements. Choosing the right data is the same as choosing the right ingredients for a potion. Making the wrong choice, and you might end up with weird results, or even worse, a spell that hits you o.O!</p> <ol> <li> <p>**Relevance:**duration_distribution</p> <p>Make sure that the data fits your problem. If you are trying to understand the song of birds \ud83d\udc26, analyzing scrolls of dragon lore \ud83d\udc32 won't be of much help...</p> </li> <li> <p>Diversity:</p> <p>The more diverse your data is, the stronger your model will be. It's like fighting different types of enemies, each of them will add a different type of experience to your power.</p> </li> <li> <p>Freshness:</p> <p>In the vast evolving world of magic and technology, old data, can lead to outdated solutions. Always be looking for the latest and greatest scrolls or updates to your datasets.</p> </li> </ol>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#discovering-great-repositories","title":"Discovering Great Repositories \ud83d\udcda\ud83c\udf0c","text":"<p>Luckily, for young wizards like us, many great wizards of the past have put together their knowledge and made them available in big repositories. Here are a few of them where you can begin your quest:</p> <ol> <li> <p>Kaggle:</p> <p>Often called the 'grand arena' of data sciense, Kaggle not only offers you lots of datasets, but also challenges and competitions to test your skills.</p> </li> <li> <p>UCI Machine Learning Repository:</p> <p>A very trusted treasure trove of datasets, curated and maintained by the scholars of the University of California, Irvine.</p> </li> <li> <p>Datasets from famous institutions:</p> <p>Many magic schools \ud83c\udff0 like MIT, Stanford, and Harvard release datasets for the public to use. Make sure to keep an eye out on their releases and announcements.</p> </li> </ol>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#the-adventure-of-acquiring-data","title":"The Adventure of Acquiring Data \ud83c\udf04\ud83c\udf92","text":"<p>Going on a quest on search for data, is much like going on a great adventure. There are maps to follow, challenges to face, and treasures to discover. But don't worry, with the right compass and guidance, you will find the hidden gems that will make your deep learning spells stronger.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#reading-the-map-identifying-data-needs","title":"Reading the Map: Identifying Data Needs \ud83d\uddfa\ufe0f\ud83d\udd0d","text":"<p>Before diving in the sea of data, it's important to know, exactly what you are looking for.</p> <ol> <li> <p>Purpose and Your Goal:</p> <p>Write down the core goal of your deep learning model. If you're crafting a potion to heal plants \ud83c\udf31, you won't be gathering ingredients from the depths of the ocean.</p> </li> <li> <p>Features and Attributes:</p> <p>Write down all the specifics. What kind of data points, characteristics, and information do you need? This will help you narrow down your search, to make sure you gather only what's important.</p> </li> <li> <p>Data Format:</p> <p>Be clear about the format you need. Are you looking for images \ud83d\uddbc\ufe0f, text \ud83d\udcdc, audio \ud83c\udfb5, or a combination?</p> </li> </ol>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#going-on-the-quest","title":"Going on the Quest \ud83e\udd7e\ud83c\udf32","text":"<p>Now knowing what you are looking, it is time to start the journey into the world of data.</p> <ol> <li> <p>Public Repositories:</p> <p>As mentioned before, platforms like Kaggle and UCI are your go to places. Offering a wide variety of datasets that have been processed and prepared, start your quest here!</p> </li> <li> <p>Web Scraping:</p> <p>Sometimes the data you need lays deep in the world wide web, you can go out and acquire this data by hand, or if there's too much data to get by hand, tools like <code>Beautiful Soup</code> or <code>Scrapy</code>, can help you automate this process</p> </li> <li> <p>APIs:</p> <p>Many platforms and services also offer APIs that allow you to access and retrieve data. For example the Google Search API allows to scrape the search results of google and learn about many websites that Google has discovered.</p> </li> </ol>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#creating-our-dataset-crafting-the-beat-of-magic","title":"Creating our Dataset: Crafting the Beat of Magic \ud83e\udd41\ud83c\udfb6","text":"<p>Going into the world of deep learning, there is this magical feeling, when you create magic based on your own dataset. It's like crafting a wand from a tree you have grown yourself. The connection is deep, and the spells are truly powerful. You will know the dataset by heart, which makes working with it, so much better.</p> <p>In this section, let's find out how to create our own dataset, filled with samples of the drums.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#assembling-our-ingredients-getting-sample-packs","title":"Assembling our Ingredients: Getting Sample Packs \ud83d\udce6\u2728","text":"<p>Every great potion, starts with the best ingredients. For our drum magic, we began by purchasing several high-quality sample packs. These packs are our treasure chests \ud83c\udf81, filled with samples waiting to be uncovered.</p> <p>As a producer, you will probably already have many samples in your library, use those!</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#laying-down-the-foundations-dataset-structure","title":"Laying Down the Foundations: Dataset Structure \ud83c\udff0\ud83d\udcc2","text":"<p>To keep our magical ingredients organized, we will create a clear structure for our dataset. In your file explorer, in the folder we created for our project, create several new folders using the following structure:</p> <pre><code>dataset\n\u251c\u2500\u2500\u2500drums\n    \u251c\u2500\u2500\u2500claps\n    \u251c\u2500\u2500\u2500clicks\n    \u251c\u2500\u2500\u2500cymbals\n    \u251c\u2500\u2500\u2500hats_closed\n    \u251c\u2500\u2500\u2500hats_open\n    \u251c\u2500\u2500\u2500kicks\n    \u251c\u2500\u2500\u2500percussion\n    \u251c\u2500\u2500\u2500rides\n    \u251c\u2500\u2500\u2500rimshots\n    \u251c\u2500\u2500\u2500shakers\n    \u251c\u2500\u2500\u2500snaps\n    \u251c\u2500\u2500\u2500snares\n    \u251c\u2500\u2500\u2500tambourines\n    \u2514\u2500\u2500\u2500toms\n</code></pre> <p>This structure will serve as our library \ud83d\udcda, with each folder dedicated to a specific type of sound.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#sorting-the-magic-organizing-samples","title":"Sorting the Magic: Organizing Samples \ud83d\uddc4\ufe0f\ud83d\udd2e","text":"<p>With our foundation created, it is time to dive in to our purchased sample packs and begin the big task of organization. The same as sorting mystical herbs, each sample is carefully listened to and placed in the right folder.</p> <ul> <li>Kick samples go into the <code>kicks</code> folder.</li> <li>Snare samples will find their way in the <code>snares</code> folder</li> <li>The crisp sound of closed hats go to <code>hats_closed</code></li> <li>And so on, for all type of audio samples</li> </ul> <p>It's important that each folder is nicely balanced. It's better to have 100 kicks and 100 toms, then 1000 kicks and 10 toms. </p> <p>If you don't have enough samples for each type, make sure to remove the folders with not enough samples. Our sample classifier, won't be able to classify this type of sample anyway, so it's best not to confuse it.</p> <p>Be patient and precise during this task, a well-organized dataset is like a well-organized spellbook. It creates efficiency, accuracy, and a touch of pure magic.</p> <ul> <li>Because our dataset contains premium samples, we unfortunately can't share this dataset publicly. A small dataset you could start with, is Kaggle's Drum Kit Sound Samples</li> </ul>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#verification-refinement","title":"Verification &amp; Refinement \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udd0d","text":"<p>When all samples are in place, we do a deep verification. Making sure all our ingredients are of the highest quality. We listen to the samples, checking for misplacements, and refining the organization.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#peering-into-our-chosen-scroll","title":"Peering into our Chosen Scroll","text":"<p>Every great wizards knows the importance of understanding the scrolls and spellbooks they use. Like this, before we dive in classifying samples, it's important to understand our data. This is one of the reasons i like building my own datasets, while it's a lot of work, it makes me understand the data on a deeper level.</p> <p>Besides that, even creating your own dataset, will usually still leave holes in your understanding of the data. So let's look at some ways that we can use to help us understand the data, it's structure and possible challenges we might need to overcome.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#setup","title":"Setup \u2699\ufe0f","text":"<p>Let's go look at our data in a bit more technical way.</p> <ul> <li> <p>Installing Librosa:</p> <p>To interact with our audio sample programatically we use a great library for python called <code>librosa</code>. This is a package used for music and audio analysis.</p> <p>Go into your terminal/command prompt, activate our magical room (virtual environment) and run:</p> <pre><code>pip install librosa\n</code></pre> </li> <li> <p>Installing Seaborn:</p> <p>Seaborn is a beautiful data visualization package based on matplotlib, it gives you a easy interface to work with to draw attractive and informative graphics:</p> <p>Run the following in your command prompt/terminal:</p> <pre><code>pip install seaborn\n</code></pre> </li> <li> <p>Open up a new Jupyter notebook:</p> <p>In the terminal/command prompt run:</p> <pre><code>jupyter notebook\n</code></pre> </li> <li> <p>Make a new notebook:</p> <p>Click on <code>New</code> in the top right of the user interface. Choose <code>Notebook</code></p> </li> <li> <p>Give it a proper name:</p> <p>I like to name the notebooks i create, so in the future i know exactly which one is which.</p> <p>Choose <code>File</code> and click <code>Rename...</code> Name it something that you can identify it from. I called it <code>analyzation.ipynb</code></p> </li> </ul>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#summoning-our-first-sound-audio-playback","title":"Summoning our first sound: Audio Playback \ud83c\udfa7\ud83e\ude84","text":"<p>Before we dive in the technical stuff, let's take a listen to some of our samples.</p> <p>PS: Make sure to select a .wav file, i've tried several .aif files and wasn't able to get this to playback in this section (don't worry, they still work fine for our AI training).</p> <p>Enter the following in our notebook:</p> <pre><code>import IPython.display as ipd\nipd.Audio('path-to-sample') \n# Where path-to-sample is to a audio file in our dataset for example:\n# ipd.Audio('dataset/drums/kicks/KSHMR Big Kick 01 (D).wav')\n</code></pre> <p>If u run the above cell, you can playback the chosen sample.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#the-heartbeat-of-our-samples-visualizing-waveforms","title":"The heartbeat of our samples: Visualizing Waveforms \ud83d\udcc8\ud83c\udf0a","text":"<p>Visualizing the waveform of some of our samples from all the categories can give us some insights into how their amplitude patterns change over time.</p> <p>Create a new cell and enter the following:</p> <pre><code>import librosa.display\nimport matplotlib.pyplot as plt\ny, sr = librosa.load('path-to-sample')\nplt.figure(figsize=(10, 4))\nlibrosa.display.waveshow(y, sr=sr)\nplt.title('Waveform')\n</code></pre>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#understanding-our-durations","title":"Understanding our durations \u23f3\ud83d\udcca","text":"<p>Let's take a look at the distribution of the duration of the samples in our dataset. This way we can see if we have any outliers and it will help us set a standard length for our model.</p> <p>Let's first create a helper function, which scans our dataset and returns the filepath for each of our samples.</p> <p>Create a new cell that will hold our function and enter:</p> <pre><code>import os\ndef get_sample_paths(root):\n\"\"\"Recursively gather all audio sample paths within our dataset directory.\"\"\"\nsample_paths = []\nfor dir, names, files in os.walk(root):\nfor file in files:\nif file.endswith('.wav') or file.endswith('.aif'): # Assuming WAV/AIF format, but you can modify or extend as required\nsample_paths.append(os.path.join(dir, file))\nreturn sample_paths\n</code></pre> <p>Now let's use this function gather our samples and then we can look at the duration of each sample.</p> <p>Create a new cell with the following code:</p> <pre><code>import librosa\nimport seaborn as sns\nsample_paths = get_sample_paths('dataset')\n# Get the durations for our dataset\ndurations = [librosa.get_duration(path=f) for f in sample_paths]\ndurations_ms = [i * 1000 for i in durations] # Convert our duration into milliseconds, for easier analyzation\n# Visualizing the distrubtion of our durations\nsns.histplot(durations_ms, bins=20, kde=True)\nplt.title('Duration Distribution')\nplt.xlabel('Milliseconds')\nplt.ylabel('Number of Samples')\n</code></pre> <p>When we run the above cell, we get the following distribution for our dataset: </p> <p>We can now see that the majority of our samples are around the 1000 ms durations.</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#dissecting-the-frequency-domain-spectogram-analysis","title":"Dissecting the Frequency Domain: Spectogram Analysis \ud83c\udf0c\ud83d\udcca","text":"<p>The spectogram is a beautiful representation of audio in a visual way. It shows the frequencies of a audio file as they vary with time. This in my opinion is one of the most important visualizations to understand how a sound behaves.</p> <pre><code>import numpy as np\n# Picking the first magical audio scroll from our collection\nfirst_sample = sample_paths[0]\n# Unrolling the scroll to hear its sounds and mysteries\n# 'y' is the melody we hear\n# 'sr' is how fast the scroll sings its song\ny, sr = librosa.load(first_sample, sr=None)\n# Making our canvas big enough to paint the magic on\nplt.figure(figsize=(10, 4))\n# Turning the scroll's song into a beautiful picture\n# We use a spell to capture the song's energy\n# Then, we color it using the power of decibels\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\n# Painting the song on our canvas\nlibrosa.display.specshow(D, sr=sr, x_axis='time', y_axis='log')\n# Adding a magical color guide to our painting\nplt.colorbar(format='%+2.0f dB')\n# Giving our masterpiece a name\nplt.title(f'The Magic of {os.path.basename(first_sample)}')\n# Revealing our magical art to the world\nplt.show()\n</code></pre> <p>When we run this, we get the following spectogram: </p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#our-audio-type-distribution-class-sample-counts","title":"Our Audio Type Distribution: Class Sample Counts \ud83c\udfb2\ud83d\udccb","text":"<p>It's important to know the number of samples for each audio type. This so we can make sure that our samples are evenly spread across all types.</p> <p>Run the following in a new cell:</p> <pre><code>import os\n# Setting the path to the main dataset folder\ndataset_path = \"dataset/drums\"\n# Using a spell to gather all the magical categories from the kingdom of 'dataset'\ncategories = [d for d in os.listdir(dataset_path) if os.path.isdir(os.path.join(dataset_path, d))]\nsample_counts = {category: len(os.listdir(os.path.join(dataset_path, category))) for category in categories}\nsample_counts\n</code></pre> <p>Our sample counts look like this (as you can see it's not properly balanced, we still have some work to do to make our dataset better (always be improving!)):</p> <pre><code>{\n'claps': 425,\n'click': 10,\n'cymbals': 168,\n'hats_closed': 104,\n'hats_open': 161,\n'kicks': 322,\n'percussion': 0,\n'rides': 140,\n'rimshot': 30,\n'shakers': 56,\n'snaps': 33,\n'snares': 463,\n'tambourines': 0,\n'toms': 81\n}\n</code></pre> <p>We have done some great analyzing! We have a deeper understanding of our data, but we also made some scripts, which can also be used in the rest of our journey!</p> <p>Remember, the key in mastering deep learning lies in understanding the data you work with! \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udcdc\ud83c\udfb6</p>"},{"location":"blog/2023/08/15/finding-acquiring-data-the-cornerstone-of-magical-models/#conclusion","title":"Conclusion","text":"<p>With our machine properly setup and our data ready, we can now finally begin with model training (YAY! \ud83e\udd73)</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/","title":"Setting Up Your Machine For Deep Learning","text":"<p>Hey there, explorer! \ud83d\ude80</p> <p>Guess what? We are about to start a super fun and exciting adventure into the world of deep learning. Now you might be wondering, \u201cWhat is deep learning?\u201d.</p> <p>Think of it as a magical tool that not only lets computers recognize things like pictures of cats and dogs, but also helps them create new sounds, melodies, and even whole songs! \ud83c\udfb5\ud83d\udc31\ud83c\udfb6</p> <p>Have you ever dreamt of a computer composing its own music, or changing your voice to sound like your favorite cartoon character? With deep learning, all of this becomes possible! \ud83c\udfa4\ud83c\udfa7</p> <p>But, just like setting up a new instrument before playing it, we need to make sure our computer is ready for this new world.</p> <p>This guide will help us tune our computer to perfection. We\u2019ll get it ready step by step, and i promise it will be super fun! \ud83c\udfb9\ud83e\uddd9\u200d\u2642\ufe0f</p> <p>Are you excited to begin?</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#understanding-the-basics","title":"Understanding the basics","text":""},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#cpu-vs-gpu","title":"\ud83e\udde0 CPU vs GPU","text":"<p>The CPU is the brain of the computer, it\u2019s so important, that without it, your computer would turn into a simple brick. It\u2019s responsible for all the main things a computer does, running windows, your internet browser and your favorite DAW. Under the hood all it\u2019s doing is calculating numbers.</p> <p>Now the GPU (Graphics Card) is responsible for making things look pretty. It\u2019s wahat you need to play your favorite games, like Diablo, Fifa, Minecraft and all other games you play.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#why-do-i-need-a-gpu","title":"Why do i need a GPU","text":"<p>The way the GPU is created, is that it\u2019s super fast at calculating the numbers that show you the graphics, that simulate physics etc. And because it\u2019s so fast at these tasks. AI experts have found out that using your GPU to train your AI application, is alot faster then using your CPU.</p> <p>Now if you don\u2019t have a good (or supported) graphics card, you can still use your CPU, however training your AI will take alot longer.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#checking-your-hardware","title":"Checking Your Hardware","text":""},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#become-a-computer-detective","title":"\ud83d\udd75\ufe0f Become a Computer Detective!","text":"<p>Before getting started with deep learning, we have to become a bit of a detective and take a look inside our computer. It\u2019s just like checking your backpack before you go camping, you want to make sure you have all the essentials!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#do-i-have-a-deep-learning-friendly-gpu","title":"\ud83d\udda5\ufe0f Do I have a deep learning-friendly GPU?","text":"<ol> <li> <p>Windows:</p> </li> <li> <p>Click on the search bar at the bottom</p> </li> <li> <p>Type in <code>Device Manager</code> and click on it.</p> <ul> <li>Look for <code>Display adapters</code> and click on the arrow next to it.     If you see names like <code>NVIDIA</code> or <code>AMD</code>, you might have a     compatible GPU! \ud83c\udf1f</li> </ul> </li> <li> <p>Mac:</p> <ul> <li>Click on the Apple logo on the top left.</li> <li>Select <code>About This Mac</code></li> <li>Look under <code>Graphics</code>. If you see <code>AMD</code> or <code>Radean</code>, that\u2019s a     possible GPU! \ud83c\udf89</li> </ul> </li> <li>Linux:<ul> <li>Open your terminal</li> <li>Type <code>lspci | grep VGA</code> and press Enter.</li> <li>Names like <code>NVIDIA</code>, <code>AMD</code>, or <code>Radeon</code> mean you might have a     compatible GPU! \ud83c\udf88</li> </ul> </li> </ol>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#is-my-gpu-ready-for-deep-learning","title":"\ud83d\ude80 Is My GPU Ready for Deep Learning?","text":"<p>Think of your GPU like a superhero. It might be ready to fly and save the world, or it might still be training to get there. In the industry the widely supported GPUs are <code>NVIDIA</code> GPUs. Deep Learning Frameworks like <code>PyTorch</code> and <code>TensorFlow</code> mainly support <code>NVIDIA</code>, while it is possible for <code>TensorFlow</code> to use <code>AMD</code> GPUs, it will be a very big task to get this working.</p> <p>Check out some reviews on your GPU related to deep learning tasks. Keep an eye out for things like <code>CUDA cores</code> (These are the magic units that help with AI), and how new your GPU is.</p> <p>Newer models usually come with more powers!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#what-if-i-dont-have-a-hero-gpu","title":"\ud83d\udcad What if I Don\u2019t Have a Hero GPU?","text":"<p>Don\u2019t worry! Even if your GPU isn\u2019t that superhero for deep learning, or if you don\u2019t have a GPU, you can still train AI models! There are many magic clouds up in the sky, where alot of powerful GPUs live. These places let you use their superhero GPU for a while, for a small price or often even for free!</p> <p>Here are some to look at: </p> <ol> <li>Google Colab: This is like a magic playground. It gives you a notebook (a magic book where you can write code and see results). The best part? It comes with a free GPU! Just remember, if you play for too long, the playground might ask you to take a break. </li> <li>Paperspace: This is a realm where you can summon powerful computers with strong GPUs. You can use them for a few coins, but they are super fast and worth it! </li> <li>Kaggle Notebooks:  This place is like a training ground for wizards and witches wanting to experiment. They also offer free GPUs. You can practice, learn, and share with other learners here.</li> </ol>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#quick-recap","title":"\ud83d\udd0d Quick Recap","text":"<ul> <li>Check your GPU brand.</li> <li>See if it\u2019s a superhero-level GPU for deep learning.</li> <li>If not, visit one of the magic clouds to borrow their power.</li> </ul> <p>In the next section, we\u2019ll look at setting up the magic spells (software) we need to start our deep learning journey! \ud83c\udf0c\ud83d\udd2e</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#getting-the-necessary-software","title":"Getting the Necessary Software","text":"<p>Before we can cast these deep learning spells, we need to gather the correct ingredients. Think of them as the potions and scrolls needed by wizards before casting their spells</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#cuda-the-magical-portal-between-worlds","title":"\ud83e\uddd9\u200d\u2642\ufe0f CUDA: The Magical Portal Between Worlds","text":"<p>Imagine a big magical world, where every sparkle \u2728 of magic is a small calculation. This realm is huge and beautiful, with millions of sparkles every second. Now, think of a portal \ud83c\udf00 that allows wizards to travel between our world, and this magical world. Whenever they are in the magical world, they can use all these tiny sparkles of magic. This portal is what we call <code>CUDA</code> \ud83d\udca1. Which officialy stands for <code>Compute Unified Device Architecture</code>, yes.. i know.. i didn\u2019t think of it either.</p> <p>In the world of computers, billions of calculations happen every second, especially in deep learning and AI \ud83e\udd16. The main thing in deep learning is crunching huge amounts of data \ud83d\udcca, looking for pattners, understanding images \ud83d\uddbc\ufe0f, recognizing a voice and even generating new music \ud83c\udfb6! This requires soo much power.</p> <p>So, what about this <code>CUDA</code>? \ud83e\uddd0</p> <p><code>CUDA</code> is a magical language and set of tools, created by <code>NVIDIA</code>, which allows our software (the spells we cast \u2728) to communicate directly with <code>NVIDIA GPUs</code>. With <code>CUDA</code> we can tell the GPU precisely, which calculations to perform and in what order, so we can truly maximize it\u2019s power \ud83d\ude80.</p> <p>Just think of it like this: <code>CUDA</code> helps our computer and GPU talk to each other so they can work together to be more powerful (Gogeta vs Vegito anyone? \ud83e\udd4a)</p> <p>Without <code>CUDA</code>, our journey into deep learning would be like trying to go mining in those pesky Minecraft caves. With <code>CUDA</code>, it\u2019s like we\u2019ve got an enchanted pickaxe \u26cf\ufe0f\u2728, that lights up the caves when we are digging. Wouldn\u2019t we all want a pickaxe like that? \ud83d\ude04</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#checking-cuda-compatibility-with-your-gpu","title":"\ud83d\udc41\u200d\ud83d\udde8 Checking CUDA compatibility with your GPU","text":"<p>To use this powerful tool, our GPU needs to be able to read this CUDA spellbook. Most newer GPUs are trained in this art, but to make sure, you can visit the NVIDIA CUDA GPUs page. If you see your GPU listed here, you are fully ready for this magical journey!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#installing-cuda","title":"\ud83d\udd2e Installing CUDA","text":"<p>Now how do we get this beautiful spellbook?</p> <p>That\u2019s the beauty\u2026 we don\u2019t need to!</p> <p>In a future step, where we will be installing a popular deep learning library, <code>CUDA</code> will be installed for you \ud83d\udc9d.</p> <p>How easy is that?!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#setting-up-python","title":"Setting up Python \ud83d\udc0d","text":"<p>\ud83d\ude80 Things are starting to get exciting! Remember how wizards use special words to cast spells? Well, in our deep learning adventure, we will be using a magical language called <code>Python</code> \ud83d\udc0d to write our very own spells \ud83e\udd2f (which are like computer programs!).</p> <p>Just like how every magician needs to know special words to create magic, we need to setup <code>Python</code> to start creating our deep learning spells.</p> <p>Let\u2019s dive in and get our magic toolkit ready! \ud83c\udfa9\u2728</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#the-magic-of-virtual-environments","title":"The Magic of Virtual Environments \ud83c\udf0d\u2728","text":"<p>Have you ever seen a magician pull a rabat out of a hat \ud83d\udc30? or make things float in a specififc magic room? Now imagine if a magician would be doing all their tricks in that same room. Things would get very messy\u2026 full of floating rabbits and stuff \ud83d\ude02 (kinda cool though\u2026)</p> <p>This is where virtual environments come in. Think of these as special magic rooms, where we can practice a specific spell, without affecting all the other spells we might have.</p> <p>By using these rooms, we make sure our magic spells (or code..) don\u2019t interfere with eachother and always work the way we want them to.</p> <p>In the coding world, this makes sure that all the different projects we will have, can have their own settings, their own libraries, and even their own version of Python, without messing up the other projects.</p> <p>To create a virtual environment, we will first need our basic version of Python installed (which we can then use to create these magic rooms).</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#setting-up-our-magic-language-python-with-pip","title":"Setting up our magic language: Python (with <code>pip</code>)","text":""},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#what-the-hell-is-pip","title":"What the hell is pip \ud83d\ude35\u200d\ud83d\udcab?","text":"<p>Imagine you\u2019re a wizard, you\u2019re progressing and you\u2019re discovering there are so many spells, more then what u already know. How do add all these beautiful spells to your spellbook?</p> <p>This is where <code>pip</code> comes in!</p> <p>It\u2019s like a magical scroll that let\u2019s you add more and more spells (or tools) that other wizards have created, all to our own spellbook!</p> <p>Want to play with images or sounds? Ask <code>pip</code> to bring you the right spells! (or in the real world, the library).</p> <p>Now how do we set all this up?</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#how-to-install","title":"How to install","text":"<ol> <li>Go to Python\u2019s official website     and download the latest version.</li> <li>Open the installer you download, and follow the instructions. *Make     sure to check the box that says <code>Add Python to PATH</code> during     installation (this so we can use python from anywhere on our PC)</li> </ol> <p>Now let\u2019s make sure everything. To do that we will need to start using the command line.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#the-wizards-crystal-ball","title":"The wizards crystal ball \ud83d\udd2e","text":"<p>Before we check our Python installation, we need to get to know one of the most important tools for a wizard: The Crystal Ball, or in professional terms - the Command Line (for Windows) or the Termianl (for Mac and Linux).</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#what-is-the-command-lineterminal","title":"What is the Command Line/Terminal?","text":"<p>Imagine you have a crystal ball. Whenever you ask it something, you\u2019re actually giving it a command, and the crystal ball executes this command for you instantly.</p> <p>The command line or terminal is exactly like that crystall ball! It\u2019s a place where you enter commands, and the computer immediatly does what you tell it to.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#how-to-access-your-crystal-ball","title":"How to access your crystal ball","text":"<ul> <li> <p>Windows Users \ud83e\ude9f</p> <p>Press the <code>Windows + R</code> keys together, a small window will pop up. Type <code>cmd</code> and press Enter. This will open up the command Line.</p> </li> <li> <p>Mac Users \ud83c\udf4f</p> <p>Press <code>Command + Space</code> to open up Spotlight. Type <code>terminal</code> and press Enter.</p> </li> <li> <p>Linux Users \ud83d\udc27</p> <p>This varies a bit depending on which distribution u use, but usually, you can find the Terminal in your applications menu or using your keyboard shortcuts like <code>ctrl + alt + t</code>.</p> </li> </ul>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#checking-our-python-using-our-crystal-ball","title":"Checking our Python using our Crystal Ball","text":"<p>Now that we know how to open our crystal ball, we can give it some commands to check out if Python is succesfully installed:</p> <ol> <li>Open your crystal ball</li> <li>Type <code>python --version</code> and press Enter</li> <li> <p>The crystal ball should tell you which version of Python you have     installed. If it does, that means your Python spellbook, is ready to     work! If not, it means your Python was not installed correctly. Try     following the Python installation steps again, or leave a     comment/email and i will try my best to help you.</p> <pre><code>C:\\Users\\rvanh&gt;python --version\nPython 3.10.11\n</code></pre> </li> </ol>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#checking-our-pip-install","title":"Checking our pip install","text":"<p>On the same note as checking for Python, we can check for <code>pip</code>.</p> <ol> <li> <p>In the same crystal ball type in: <code>pip --version</code></p> <pre><code>C:\\Users\\rvanh&gt;pip --version\npip 23.1.2 from C:\\Python310\\lib\\site-packages\\pip (python 3.10)\n</code></pre> </li> </ol> <p>If it shows a version number, you are good to go!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#creating-our-first-virtual-environment","title":"Creating our first Virtual Environment","text":"<p>Setting up our first magic room (or virtual environment) is super easy!</p> <p>Open your explorer, and create a folder on your computer where you would like to store all your deep learning projects.  Mine is located in <code>D:\\Development\\AI</code></p> <ol> <li> <p>Windows Users \ud83e\ude9f:</p> <ul> <li> <p>In your crystal ball, we have to go to the folder we just     created, using a spell called <code>cd</code> - which stands for     <code>change directory</code>. In my case i would type:</p> <pre><code>cd \"D:\\Development\\AI\"\n</code></pre> </li> <li> <p>If the folder you have created is on a different drive then the     default, in my case <code>C</code> drive, the windows command prompt can     sometimes be a bit weird, in my situation it did change the     directory succesfully, but it doesn\u2019t display it yet:</p> <pre><code>cd \"D:\\Development\\AI\"\n</code></pre> <p>In this case, we would need to tell our crystal ball to work in this different drive - which in my case is the <code>D</code> drive. We can simply do that by writing <code>[Drive Letter]:</code>, so i would enter:</p> <pre><code>D:\n</code></pre> <p>and then press enter: <pre><code>cd \"D:\\Development\\AI\"\nD:\n</code></pre></p> </li> <li> <p>Since we are now in the folder that holds all our AI projects,     let\u2019s create a folder for our first project, which will be a     \u201cSample Classifier (more on that later)\u201d:     <pre><code>cd \"D:\\Development\\AI\"\nD:\nmkdir sample-classifier\n</code></pre></p> </li> <li> <p>Now let's move into that directory:     <pre><code>cd \"D:\\Development\\AI\"\nD:\nmkdir sample-classifier\ncd sample-classifier\n</code></pre></p> </li> <li> <p>Now that we are here, we can create our virtual environment, using the syntax:</p> <p><code>python -m venv [name-of-environment]</code></p> <p>Where [name-of-environment] can be anything you want it to be, let's name ours <code>sample-classifier-env</code></p> <pre><code>cd \"D:\\Development\\AI\"\nD:\nmkdir sample-classifier\ncd sample-classifier\npython -m venv sample-classifier-env\n</code></pre> </li> <li> <p>Our new magical room has been created, now let's tell our crystal ball, that from now on we use this room!     Anytime you want to work on this project, make sure to execute the following step, so your computer knows which room to use</p> <pre><code>cd \"D:\\Development\\AI\"\nD:\nmkdir sample-classifier\ncd sample-classifier\npython -m venv sample-classifier-env\nsample-classifier-env\\Scripts\\activate\n</code></pre> </li> </ul> </li> <li> <p>Mac and Linux Users \ud83c\udf4f\ud83d\udc27</p> <ul> <li> <p>Tell your crystal ball to move to our newly created folder, using a spell called <code>cd</code>:</p> <pre><code>cd \"/home/Development/AI\"\n</code></pre> </li> <li> <p>We are now in the place that will hold our AI projects,     let\u2019s make a seperate place for our first project, a     \u201cSample Classifier (more on that later)\u201d:     <pre><code>cd \"/home/Development/AI\"\nmkdir sample-classifier\n</code></pre></p> </li> <li> <p>Let's go into that directory:     <pre><code>cd \"/home/Development/AI\"\nmkdir sample-classifier\ncd sample-classifier\n</code></pre></p> </li> <li> <p>Now we can create our virtual environment, the following syntax is used for creating a environment:</p> <p><code>python -m venv [name-of-environment]</code></p> <p>[name-of-environment] can be any name you want, We named it <code>sample-classifier-env</code></p> <pre><code>cd \"/home/Development/AI\"\nmkdir sample-classifier\ncd sample-classifier\npython -m venv sample-classifier-env        </code></pre> </li> <li> <p>Our room has been created, now we need to use this room!     Anytime you want to work on this project, make sure to tell the computer which room to use</p> <pre><code>cd \"/home/Development/AI\"\nmkdir sample-classifier\ncd sample-classifier\npython -m venv sample-classifier-env\nsource sample-classifier-env/bin/activate        </code></pre> </li> </ul> </li> </ol> <p>You will know your virtual environment is active when you see its name on the left side of your command line or terminal. This room will help keep all your magical deep learning experiments organized and separate!</p> <p>Whenever you want to leave the circle, just type <code>deactivate</code> in your command line or terminal.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#installing-our-deep-learning-library","title":"Installing our Deep Learning library","text":"<p>While we are getting deeper into the deep learning world, we need to equip ourselves with the right AI tools. Just like a wizard has their favorite wand, in deep learning, we have several libraries we can use. Each have their own unique capabilities and strenghts.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#lets-look-into-the-chamber-of-libraries","title":"Let's look into the chamber of libraries","text":"<p>Before we dive in, let's look at the different tools we can use:</p> <ul> <li> <p>TensorFlow \ud83c\udf0a: Created by the wizards from Google, TensorFlow is very versatile and widely used. It gives you many high-level and low-level tools, this way it's usable for everyone, from beginner to the most powerful wizards.</p> </li> <li> <p>PyTorch \ud83d\udd25: Coming from Facebook's (or Meta nowadays...) school of sorcery, PyTorch is like a spellbook that changes and adapts while you are casting spells. Being this flexible allows wizards to experiment as much as they please, making it loved by people who love to tinker and innovate in their magic.</p> </li> <li> <p>FastAI \ud83c\udf2a\ufe0f: A rising star in this world of deep learning. FastAI is built on top of PyTorch. People celebrate it, because it's super user-friendly and being able to get world-class results with very little code. This library is the perfect example of a \"magic spell\" - being able to achieve great things with simple incantations.</p> </li> </ul> <p>There are many libraries to choose from, but for our journey, we will be using the great power of FastAI! Being able to achieve beautiful results very fast, and then dive deeper and use the power of PyTorch to tinker and innovate when we feel ready, is a power we can't pass up on.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#installing-fastai-equipping-our-spellbook","title":"Installing FastAI: Equipping our Spellbook \ud83d\udcd6","text":"<p>Because FastAI is built on top of PyTorch, we will first have to install and setup PyTorch. Just like gathering the base ingredients to create a powerful potion.</p> <ol> <li> <p>Setting up PyTorch \ud83d\udd25: </p> <p>While i will show you the current way to install PyTorch, make sure to check out PyTorch's official installation guide, since the world of AI changes fast, and the version we will currently be installing, might be replaced tomorrow.</p> <p>On the PyTorch installation guide, we have to choose between several options:</p> <ul> <li> <p>PyTorch Build: Do you want to play with the newest features, which can have bugs, or do you want to work with a stable version? We will choose `Stable`` (which is currently on version 2.0.1)</p> </li> <li> <p>Your OS: Choose the operating system you are using, we will be using <code>Windows</code></p> </li> <li> <p>Package: This is where we choose, how we want to install PyTorch. Since we have been using <code>pip</code> so far, we will choose <code>Pip</code></p> </li> <li> <p>Computer Platform: Here we choose what hardware we want to use with PyTorch. CUDA gives us the ability to use our GPU, while the CPU option will install PyTorch, with only CPU capabilities. Choosing CUDA is the best of both worlds, we can still use the CPU if we wanted. We will choose the latest supported CUDA version by our GPU, which currently is <code>CUDA 11.8</code></p> </li> </ul> <p>Having selected our options, the installation guide will show us what command to run to install PyTorch. The command which shows up for us currently is:</p> <pre><code>pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>So in our crystal ball (Command Prompt/Terminal) enter this exact command.</p> <p>If you have closed the command prompt after the last steps, make sure to open it again, <code>cd</code> into the correct directory and <code>activate</code> our magic room as described above</p> </li> <li> <p>Installing FastAI \ud83c\udf2a\ufe0f: </p> <p>With PyTorch as our foundation, it is now time to summon <code>FastAI</code>. In your crystal ball, enter:</p> <pre><code>pip install fastai\n</code></pre> </li> <li> <p>Verifying our installation \ud83d\udd0d: </p> <p>To make sure that FastAI and PyTorch are ready to play with, we can run a quick test!</p> <p>In your crystal ball enter: <pre><code>python -c \"import fastai; print(fastai.__version__)\"\n</code></pre></p> <p>If everything went the way we want things to go, our crystal ball will tell you the version number of FastAI. If you see the version number, it is ready to be used for our deep learning quests!</p> </li> </ol>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#testing-your-setup","title":"Testing Your Setup \ud83e\uddea","text":"<p>Now that we have all our magic tools, let's make sure everything is working by checking if our GPU is setup correctly.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#running-a-simple-deep-learning-spell","title":"Running a Simple Deep Learning Spell","text":"<ol> <li> <p>Preparing our spell:</p> <p>Remember! Make sure your magic room is activated before we get started!</p> </li> <li> <p>Casting our GPU checker:</p> <p>Run the following command:</p> <pre><code>python -c \"from fastai.vision.all import *; print(torch.cuda.is_available())\"\n</code></pre> <p>This usefull spell asks FastAI and PyTorch to check if they can find and use the GPU. If they can, they should respond with <code>True</code>.</p> </li> </ol>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#understanding-the-output","title":"Understanding the output \ud83d\udd2e","text":"<p>If you saw <code>True</code>, congratulations! \ud83c\udf89, your GPU is ready to lend you it's powers!</p> <p>If you saw <code>False</code>, don't worry. It might mean your system is not using GPU acceleration. This can be because of different reasons, maybe the GPU is not supported, or perhaps there is a slight misconfiguration somewhere.</p> <p>For example i had this issue, because on the PyTorch website it uses <code>pip3</code> in the command. However, we have been using <code>pip</code> until now. Usually this should be fine, but if you have multiple python installation on your computer, both versions of pip could be pointing to different installations. Running the command using <code>pip</code> fixed it for me.</p> <p>If your GPU might not be supported, you can always use cloud providers like <code>Google Colab</code> to borrow the power of the GPUs in the magical clouds.</p> <p>Anyway, it's great practise to understand and test your tools. Doing this will make you know your wand and spellbook for when you plan to cast bigger and more complex spells!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#the-magical-book-jupyter-notebooks","title":"The Magical Book: Jupyter Notebooks \ud83d\udcd6","text":"<p>Imagine having access to a book that reacts to you spells immediatly when you enter them, where you can draw diagrams, make notes, and even have conversations with. In the world of deep learning, this magical book is known as a Jupyter Notebook.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#what-makes-jupyter-notebooks-so-special","title":"What makes Jupyter Notebooks so special?","text":"<ol> <li>Interactive Spells:</li> </ol> <p>Write a spell (or code) and see it's effects immediatly. This instant feedback makes it perfect for experimentation</p> <ol> <li>Blend of Text and Magic:</li> </ol> <p>Combine notes, diagrams and code in one place. It's like having a spellbook with annotations!</p> <ol> <li>Shareable:</li> </ol> <p>Once you have perfected a spell or discovered something new, you can easily share it with other wizards.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#how-to-get-this-magical-book","title":"How to get this magical book?","text":"<ol> <li>When you are in your virtual environment (or magical room), simply write:</li> </ol> <pre><code>pip install jupyter\n</code></pre> <ol> <li>To open the book and begin writing your spells, write:</li> </ol> <pre><code>jupyter notebook\n</code></pre> <p>A portal will open in your browser, which leads you to your Jupyter environment.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#mastering-your-magical-book","title":"Mastering Your Magical Book \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udcd6","text":""},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#starting-with-a-new-notebook","title":"Starting with a new notebook","text":"<p>Let's create a new notebook in our brand new environment:</p> <ul> <li>Click the <code>New</code> button on the top right</li> <li>Choose <code>Notebook</code></li> </ul> <p>Welcome to your first notebook!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#cells-the-heartbeats-of-jupyter","title":"Cells - The Heartbeats of Jupyter","text":"<ul> <li>Each notebook consists of cells. Each cell can contain code or written text (in <code>Markdown</code>)</li> <li>By default a cell will be of type <code>Code</code>, to test this out select the first cell and type in <pre><code>1 + 1\n</code></pre></li> <li>To run a cell, click on it and press <code>Shift + Enter</code>. The result will be displayed right under the cell. Try it out and see the result of our very difficult calculation! A new cell will be automatically created for you.</li> <li>To change a cell's type, use the dropdown menu at the top. Choose <code>Code</code> for Python code or <code>Markdown</code> for written text. Try it out now by selecting <code>Markdown</code> for the second cell</li> </ul>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#writing-and-formatting-text","title":"Writing and Formatting Text:","text":"<ul> <li>To write titles, use the hashtag (<code>#</code>). For example write, <code># Title</code>, this will turn into a big title. <code>## Subtitle</code> will give a slightly smaller one, and so on.</li> <li>To make text bold, wrap it in double asterisks like <code>**this is bold**</code>.</li> <li>For bullet points, use dashes (<code>-</code>) or asterisks (<code>*</code>).</li> </ul> <p>Read more about markdown</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#saving-and-closing-your-notebook","title":"Saving and Closing Your Notebook:","text":"<ul> <li>To save your work, click on the floppy disk icon on the top left or press <code>Ctrl + S</code> (or <code>Cmd + S</code> on Mac).</li> <li>When done, click on the <code>File</code> menu and choose <code>Close and Shut Down Notebook</code> to shutdown the notebook. This ensures the spells (codes) you've been running also stop.</li> </ul>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#tips-to-have-a-great-jupyter-time","title":"Tips to have a GREAT Jupyter time:","text":"<ul> <li>Autocomplete is your friend! While writing code, press <code>Tab</code> to autocomplete Python functions or variable names.</li> <li>If your notebook ever gets stuck, go to the <code>Kernel</code> menu and choose <code>Restart Kernel...</code>. This acts like a mgaical reset button, refreshing your environment.</li> </ul>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#venturing-further","title":"Venturing Further:","text":"<ul> <li>Jupyter Notebooks have many built-in functionalities, like magic commands (commands starting with <code>%</code>). For example, <code>%time</code> before a spell (code) will show you how long it takes to run.</li> <li>You can also look at data, plot graphs, and even embed videos. The limits are endless!</li> </ul> <p>Remember, Jupyter Notebooks are more then just a tool. It's your companion in this deep learning journey. The more you work with it, the better you will get!</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#conclusion","title":"Conclusion \ud83c\udf89","text":"<p>The journey to becoming a deep learning magician is enchanting but very complex, and today, we have taken a very big step preparing for our journey! Here's what we did today:</p> <ul> <li>Introduction to this Magical Realm:</li> </ul> <p>We've look at the importance of GPUs in boosting our spells and looked at using CUDA to harness it's power</p> <ul> <li>Setting up our Magical Language:</li> </ul> <p>With Python as our trusty spellbook, we are ready to cast our spells. We learned about the <code>pip</code> wand and created our own magic room, a virtual environment, to keep our spells organized.</p> <ul> <li>The chamber of libraries:</li> </ul> <p>We looked at the rich world of deep learning libraries, looking at the benefits of each. We have chosen FastAI as our companion and we made sure it was equipped with the power of PyTorch.</p> <ul> <li>Testing the waters:</li> </ul> <p>We tested our setup, to make sure all our powers are ready to use for our upcoming adventures.</p>"},{"location":"blog/2023/08/12/setting-up-your-machine-for-deep-learning/#a-glimbse-beyond-the-horizon","title":"A Glimbse Beyond the Horizon \ud83c\udf05","text":"<p>In our next post, we are going to look deeper into FastAI. We are going to look at deciphering the melodies and rhythms of the world around us by working on a audio sample classifier. Think about this, by the end of our next session, you will be able to play a drum sound to your computer - wether it's a kick or snare - and it will magically tell you what type of sound it is!</p> <p>So keep your wands ready and spellbooks open. The world of deep learning is right around the corner!</p>"}]}